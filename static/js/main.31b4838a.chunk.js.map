{"version":3,"sources":["assets/images/gifs/gifNotFound.gif","components/UI/Button/Button.js","components/UI/Input/Input.js","components/Search/Search.js","components/GifsList/Gifs/NotFound/NotFound.js","components/Logo/Logo.js","components/GifsList/Gifs/Gifs.js","components/GifsList/GifsList.js","components/Tags/Tags.js","components/UI/Wrapper/Wrapper.js","components/UI/Spinner/Spinner.js","containers/App/App.js","serviceWorker.js","index.js"],"names":["module","exports","button","props","disabled","className","onClick","clicked","attributes","children","input","onKeyPress","keyPressed","onChange","changed","value","val","type","Search","useState","searchQuery","setSearchQuery","makeReqHandler","search","event","key","target","placeholder","style","borderTopRightRadius","borderBottomRightRadius","borderTopLeftRadius","borderBottomLeftRadius","icon","faSearch","NotFound","src","gifNotFound","alt","logo","gifs","map","item","id","title","images","preview_gif","url","GifsList","gifsList","index","Tags","gifsTags","goto","remove","faTimesCircle","Spinner","App","setGifs","setGifsTags","searchStr","setSearchStr","spinner","setSpinner","windowPosition","setWindowPosition","show","notFound","message","error","setError","limit","offset","pagination","setPagination","paginationHandler","res","currentSearchStr","data","trendingGifHandler","axios","get","then","response","console","log","catch","err","searchHandler","query","length","filter","useEffect","window","addEventListener","listenToScroll","scrolled","document","body","scrollTop","documentElement","scrollHeight","clientHeight","display","toFixed","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.31b4838a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/gifNotFound.1eacda12.gif\";","import React from \"react\";\r\nimport \"./Button.css\";\r\n\r\nconst button = props => {\r\n  return (\r\n    <button\r\n      disabled={props.disabled}\r\n      className=\"Button ButtonPrimary\"\r\n      onClick={props.clicked}\r\n      {...props.attributes}\r\n    >\r\n      {props.children}\r\n    </button>\r\n  );\r\n};\r\nexport default button;\r\n","import React from \"react\";\r\nimport \"./Input.css\";\r\n\r\nconst input = props => {\r\n  return (\r\n    <input\r\n      onKeyPress={props.keyPressed}\r\n      onChange={props.changed}\r\n      value={props.val}\r\n      {...props.attributes}\r\n      className=\"Input\"\r\n      type=\"text\"\r\n    />\r\n  );\r\n};\r\nexport default input;\r\n","import React, { useState } from \"react\";\r\nimport Button from \"../UI/Button/Button\";\r\nimport Input from \"../UI/Input/Input\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faSearch } from \"@fortawesome/free-solid-svg-icons\";\r\nimport \"./Search.css\";\r\n\r\nconst Search = props => {\r\n  const [searchQuery, setSearchQuery] = useState(\"\");\r\n  const searchHandler = event => {\r\n    setSearchQuery(event.target.value);\r\n  };\r\n  const makeReqHandler = () => {\r\n    props.search(searchQuery);\r\n    setSearchQuery(\"\");\r\n  };\r\n  const keyPressedHandler = event => {\r\n    if (event.key === \"Enter\") makeReqHandler();\r\n  };\r\n  return (\r\n    <div className=\"SearchContainer\">\r\n      <Input\r\n        keyPressed={keyPressedHandler}\r\n        val={searchQuery}\r\n        changed={searchHandler}\r\n        attributes={{\r\n          placeholder: \"search for all GIFs\",\r\n          style: {\r\n            borderTopRightRadius: \"0\",\r\n            borderBottomRightRadius: \"0\"\r\n          }\r\n        }}\r\n      />\r\n      <Button\r\n        attributes={{\r\n          style: {\r\n            borderTopLeftRadius: \"0\",\r\n            borderBottomLeftRadius: \"0\"\r\n          }\r\n        }}\r\n        disabled={!searchQuery}\r\n        clicked={() => makeReqHandler()}\r\n      >\r\n        <FontAwesomeIcon icon={faSearch} />\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\nexport default Search;\r\n","import React from \"react\";\r\nimport gifNotFound from \"../../../../assets/images/gifs/gifNotFound.gif\";\r\nimport \"./NotFound.css\";\r\nconst NotFound = () => {\r\n  return (\r\n    <div className=\"NotFoundContainer\">\r\n      <h2 className=\"NotFoundText\">NO GIFS FOUND</h2>\r\n      <img className=\"NotFoundImg\" src={gifNotFound} alt=\"GIF NOT FOUND\" />\r\n    </div>\r\n  );\r\n};\r\nexport default NotFound;\r\n","import React from \"react\";\r\nimport \"./Logo.css\";\r\nconst logo = props => {\r\n  return <span className=\"Logo\">Giphy Clone</span>;\r\n};\r\nexport default logo;\r\n","import React from \"react\";\r\nimport \"./Gifs.css\";\r\n\r\nconst gifs = props => {\r\n  return (\r\n    <div className=\"GifContainer\">\r\n      {props.gifs.map(item => {\r\n        return (\r\n          <section className=\"GifContainerDisplay\" key={item.id}>\r\n            <img\r\n              className=\"GifDisplay\"\r\n              alt={item.title}\r\n              src={item.images.preview_gif.url}\r\n            />\r\n          </section>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\nexport default gifs;\r\n","import React from \"react\";\r\nimport Gifs from \"../../components/GifsList/Gifs/Gifs\";\r\nimport \"./GifsList.css\";\r\nconst GifsList = props => {\r\n  return (\r\n    <div className=\"GifsListContainer\">\r\n      {props.gifsList.map((item, index) => (\r\n        <Gifs className=\"GifsList\" key={index} gifs={item} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\nexport default GifsList;\r\n","import React from \"react\";\r\nimport \"./Tags.css\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTimesCircle } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst Tags = props => {\r\n  return (\r\n    <ul className=\"TagsContainer\">\r\n      {props.gifsTags.map((item, index) => (\r\n        <li className=\"Tags\" key={index}>\r\n          <span onClick={() => props.goto(item)}>{item}</span>{\" \"}\r\n          <span onClick={() => props.remove(item)}>\r\n            <FontAwesomeIcon icon={faTimesCircle} />\r\n          </span>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\nexport default Tags;\r\n","import React from \"react\";\r\nimport \"./Wrapper.css\";\r\nconst search = props => {\r\n  return <div className=\"Wrapper\">{props.children}</div>;\r\n};\r\nexport default search;\r\n","import React from \"react\";\r\nimport \"./Spinner.css\";\r\nconst Spinner = () => {\r\n  return <div className=\"Spinner\">Loading...</div>;\r\n};\r\nexport default Spinner;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./App.css\";\r\nimport axios from \"axios\";\r\n\r\nimport Search from \"../../components/Search/Search\";\r\nimport NotFound from \"../../components/GifsList/Gifs/NotFound/NotFound\";\r\nimport Logo from \"../../components/Logo/Logo\";\r\nimport GifsList from \"../../components/GifsList/GifsList\";\r\nimport Tags from \"../../components/Tags/Tags\";\r\nimport Wrapper from \"../../components/UI/Wrapper/Wrapper\";\r\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\r\n\r\nconst App = () => {\r\n  const [gifs, setGifs] = useState([]);\r\n  const [gifsTags, setGifsTags] = useState([\"hey\", \"funny\", \"tacos\"]);\r\n  const [searchStr, setSearchStr] = useState(\"\");\r\n  const [spinner, setSpinner] = useState(true);\r\n  const [windowPosition, setWindowPosition] = useState(0);\r\n  const [error, setError] = useState({\r\n    show: false,\r\n    notFound: false,\r\n    message: \"\"\r\n  });\r\n  const [pagination, setPagination] = useState({\r\n    limit: 40,\r\n    offset: 0\r\n  });\r\n\r\n  const paginationHandler = (res, currentSearchStr) => {\r\n    setGifs([...gifs, [...res.data]]);\r\n    //overwrite setGifs if new search\r\n    if (searchStr !== currentSearchStr) setGifs([[...res.data]]);\r\n\r\n    setPagination({\r\n      ...pagination,\r\n      offset: pagination.limit + pagination.offset\r\n    });\r\n  };\r\n  const trendingGifHandler = () => {\r\n    axios\r\n      .get(`/trending?limit=${pagination.limit}&offset=${pagination.offset}`)\r\n      .then(response => {\r\n        setSpinner(false);\r\n        // handle success\r\n        let res = response.data;\r\n        console.log(res);\r\n        paginationHandler(res, \"\");\r\n      })\r\n      .catch(err => {\r\n        setSpinner(false);\r\n\r\n        setError({\r\n          show: true,\r\n          message: `Oops! We couldn't connect with the servers`\r\n        });\r\n      });\r\n  };\r\n\r\n  const searchHandler = query => {\r\n    console.log(`search for: ${query}`);\r\n\r\n    axios\r\n      .get(\r\n        `/search?q=${query}&limit=${pagination.limit}&offset=${\r\n          pagination.offset\r\n        }`\r\n      )\r\n      .then(response => {\r\n        setSpinner(false);\r\n\r\n        // handle success\r\n        let res = response.data;\r\n\r\n        if (res.data.length > 0) {\r\n          //if there are gifs then...\r\n          setError({\r\n            show: false\r\n          });\r\n          paginationHandler(res, query);\r\n          setSearchStr(query);\r\n          let copyTagsArr = gifsTags;\r\n          //search if there is a similar item on the array, if not add it.\r\n          if (copyTagsArr.filter(item => item === query).length === 0)\r\n            setGifsTags([...gifsTags, query]);\r\n        } else {\r\n          //if there are no gifs show error.\r\n          setError({\r\n            show: true,\r\n            notFound: true,\r\n            message: `Oops! No results were found for ${query}. Try searching for another thing.`\r\n          });\r\n        }\r\n      })\r\n      .catch(err => {\r\n        setSpinner(false);\r\n\r\n        setError({\r\n          show: true,\r\n          message: `Oops! We couldn't connect with the servers`\r\n        });\r\n      });\r\n  };\r\n\r\n  const removeTagHandler = query => {\r\n    setGifsTags([...gifsTags].filter(item => item !== query));\r\n  };\r\n\r\n  useEffect(() => {\r\n    //get the trending gifs\r\n    trendingGifHandler();\r\n    window.addEventListener(\"scroll\", listenToScroll);\r\n  }, []);\r\n\r\n  const listenToScroll = () => {\r\n    const winScroll =\r\n      document.body.scrollTop || document.documentElement.scrollTop;\r\n\r\n    const height =\r\n      document.documentElement.scrollHeight -\r\n      document.documentElement.clientHeight;\r\n\r\n    const scrolled = winScroll / height;\r\n    console.log(scrolled);\r\n\r\n    setWindowPosition(scrolled);\r\n  };\r\n\r\n  let display = <GifsList gifsList={gifs} />;\r\n  if (error.show) {\r\n    display = <div className=\"AppError\">{error.message}</div>;\r\n  }\r\n  if (error.notFound) {\r\n    display = <NotFound />;\r\n  }\r\n  let windowPercent = (windowPosition * 100).toFixed(2);\r\n  if (windowPercent >= 100) {\r\n    setWindowPosition(0);\r\n    if (searchStr) {\r\n      searchHandler(searchStr);\r\n    } else {\r\n      trendingGifHandler();\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"AppBackground\" />\r\n      <Logo />\r\n      <Wrapper>\r\n        <Search val={searchStr} search={searchHandler} />\r\n        <Tags\r\n          goto={searchHandler}\r\n          remove={removeTagHandler}\r\n          gifsTags={gifsTags}\r\n        />\r\n      </Wrapper>\r\n      <Wrapper>{spinner ? <Spinner /> : display}</Wrapper>\r\n      <p>Powered By GIPHY</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./containers/App/App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}