{"version":3,"sources":["assets/images/gifs/gifNotFound.gif","components/UI/Button/Button.js","components/UI/Input/Input.js","components/Search/Search.js","components/GifsList/Gifs/NotFound/NotFound.js","components/Logo/Logo.js","components/GifsList/Gifs/Gifs.js","components/GifsList/GifsList.js","components/Tags/Tags.js","components/UI/Wrapper/Wrapper.js","components/UI/Spinner/Spinner.js","containers/App/App.js","serviceWorker.js","index.js"],"names":["module","exports","button","props","disabled","className","onClick","clicked","attributes","children","input","onKeyPress","keyPressed","onChange","changed","value","val","type","Search","useState","searchQuery","setSearchQuery","makeReqHandler","search","event","key","target","placeholder","style","borderTopRightRadius","borderBottomRightRadius","borderTopLeftRadius","borderBottomLeftRadius","icon","faSearch","NotFound","src","gifNotFound","alt","logo","gifs","map","item","id","title","images","preview_gif","url","GifsList","gifsList","index","Tags","gifsTags","goto","remove","faTimesCircle","Spinner","App","myKey","setGifs","setGifsTags","searchStr","setSearchStr","spinner","setSpinner","windowPosition","setWindowPosition","show","notFound","message","error","setError","limit","offset","pagination","setPagination","paginationHandler","res","currentSearchStr","data","trendingGifHandler","axios","get","then","response","console","log","catch","err","searchHandler","query","length","filter","useEffect","window","addEventListener","listenToScroll","scrolled","document","body","scrollTop","documentElement","scrollHeight","clientHeight","display","toFixed","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bbffad3c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/gifNotFound.1eacda12.gif\";","import React from \"react\";\r\nimport \"./Button.css\";\r\n\r\nconst button = props => {\r\n  return (\r\n    <button\r\n      disabled={props.disabled}\r\n      className=\"Button ButtonPrimary\"\r\n      onClick={props.clicked}\r\n      {...props.attributes}\r\n    >\r\n      {props.children}\r\n    </button>\r\n  );\r\n};\r\nexport default button;\r\n","import React from \"react\";\r\nimport \"./Input.css\";\r\n\r\nconst input = props => {\r\n  return (\r\n    <input\r\n      onKeyPress={props.keyPressed}\r\n      onChange={props.changed}\r\n      value={props.val}\r\n      {...props.attributes}\r\n      className=\"Input\"\r\n      type=\"text\"\r\n    />\r\n  );\r\n};\r\nexport default input;\r\n","import React, { useState } from \"react\";\r\nimport Button from \"../UI/Button/Button\";\r\nimport Input from \"../UI/Input/Input\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faSearch } from \"@fortawesome/free-solid-svg-icons\";\r\nimport \"./Search.css\";\r\n\r\nconst Search = props => {\r\n  const [searchQuery, setSearchQuery] = useState(\"\");\r\n  const searchHandler = event => {\r\n    setSearchQuery(event.target.value);\r\n  };\r\n  const makeReqHandler = () => {\r\n    props.search(searchQuery);\r\n    setSearchQuery(\"\");\r\n  };\r\n  const keyPressedHandler = event => {\r\n    if (event.key === \"Enter\") makeReqHandler();\r\n  };\r\n  return (\r\n    <div className=\"SearchContainer\">\r\n      <Input\r\n        keyPressed={keyPressedHandler}\r\n        val={searchQuery}\r\n        changed={searchHandler}\r\n        attributes={{\r\n          placeholder: \"search for all GIFs\",\r\n          style: {\r\n            borderTopRightRadius: \"0\",\r\n            borderBottomRightRadius: \"0\"\r\n          }\r\n        }}\r\n      />\r\n      <Button\r\n        attributes={{\r\n          style: {\r\n            borderTopLeftRadius: \"0\",\r\n            borderBottomLeftRadius: \"0\"\r\n          }\r\n        }}\r\n        disabled={!searchQuery}\r\n        clicked={() => makeReqHandler()}\r\n      >\r\n        <FontAwesomeIcon icon={faSearch} />\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\nexport default Search;\r\n","import React from \"react\";\r\nimport gifNotFound from \"../../../../assets/images/gifs/gifNotFound.gif\";\r\nimport \"./NotFound.css\";\r\nconst NotFound = () => {\r\n  return (\r\n    <div className=\"NotFoundContainer\">\r\n      <h2 className=\"NotFoundText\">NO GIF FOUND</h2>\r\n      <img className=\"NotFoundImg\" src={gifNotFound} alt=\"GIF NOT FOUND\" />\r\n    </div>\r\n  );\r\n};\r\nexport default NotFound;\r\n","import React from \"react\";\r\nimport \"./Logo.css\";\r\nconst logo = props => {\r\n  return <span className=\"Logo\">Giphy-Clone</span>;\r\n};\r\nexport default logo;\r\n","import React from \"react\";\r\nimport \"./Gifs.css\";\r\n\r\nconst gifs = props => {\r\n  return (\r\n    <div className=\"GifContainer\">\r\n      {props.gifs.map(item => {\r\n        return (\r\n          <section className=\"GifContainerDisplay\" key={item.id}>\r\n            <img\r\n              className=\"GifDisplay\"\r\n              alt={item.title}\r\n              src={item.images.preview_gif.url}\r\n            />\r\n          </section>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\nexport default gifs;\r\n","import React, { Fragment } from \"react\";\r\nimport Gifs from \"../../components/GifsList/Gifs/Gifs\";\r\nimport \"./GifsList.css\";\r\nconst GifsList = props => {\r\n  return (\r\n    <div className=\"GifsListContainer\">\r\n      {props.gifsList.map((item, index) => (\r\n        <Gifs className=\"GifsList\" key={index} gifs={item} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\nexport default GifsList;\r\n","import React from \"react\";\r\nimport \"./Tags.css\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTimesCircle } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst Tags = props => {\r\n  return (\r\n    <ul className=\"TagsContainer\">\r\n      {props.gifsTags.map((item, index) => (\r\n        <li className=\"Tags\" key={index}>\r\n          <span onClick={() => props.goto(item)}>{item}</span>{\" \"}\r\n          <span onClick={() => props.remove(item)}>\r\n            <FontAwesomeIcon icon={faTimesCircle} />\r\n          </span>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\nexport default Tags;\r\n","import React from \"react\";\r\nimport \"./Wrapper.css\";\r\nconst search = props => {\r\n  return <div className=\"Wrapper\">{props.children}</div>;\r\n};\r\nexport default search;\r\n","import React from \"react\";\r\nimport \"./Spinner.css\";\r\nconst Spinner = () => {\r\n  return <div className=\"Spinner\">Loading...</div>;\r\n};\r\nexport default Spinner;\r\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport axios from \"axios\";\n\nimport Search from \"../../components/Search/Search\";\nimport NotFound from \"../../components/GifsList/Gifs/NotFound/NotFound\";\nimport Logo from \"../../components/Logo/Logo\";\nimport GifsList from \"../../components/GifsList/GifsList\";\nimport Tags from \"../../components/Tags/Tags\";\nimport Wrapper from \"../../components/UI/Wrapper/Wrapper\";\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\nconst App = () => {\n  const myKey = \"QaTaTpn5xJGGG1Wktc0Gq6CEhsiSz2R3\";\n  const [gifs, setGifs] = useState([]);\n  const [gifsTags, setGifsTags] = useState([\"hey\", \"funny\", \"love\"]);\n  const [searchStr, setSearchStr] = useState(\"\");\n  const [spinner, setSpinner] = useState(true);\n  const [windowPosition, setWindowPosition] = useState(0);\n  const [error, setError] = useState({\n    show: false,\n    notFound: false,\n    message: \"\"\n  });\n  const [pagination, setPagination] = useState({\n    limit: 40,\n    offset: 0\n  });\n\n  const paginationHandler = (res, currentSearchStr) => {\n    setGifs([...gifs, [...res.data]]);\n    //overwrite setGifs if new search\n    if (searchStr !== currentSearchStr) setGifs([[...res.data]]);\n\n    setPagination({\n      ...pagination,\n      offset: pagination.limit + pagination.offset\n    });\n  };\n  const trendingGifHandler = () => {\n    axios\n      .get(\n        `https://api.giphy.com/v1/gifs/trending?api_key=${myKey}&limit=${\n          pagination.limit\n        }&offset=${pagination.offset}`\n      )\n      .then(response => {\n        setSpinner(false);\n        // handle success\n        let res = response.data;\n        console.log(res);\n        paginationHandler(res, \"\");\n      })\n      .catch(err => {\n        setSpinner(false);\n\n        setError({\n          show: true,\n          message: `Oops! We couldn't connect with the servers`\n        });\n      });\n  };\n\n  const searchHandler = query => {\n    console.log(`search for: ${query}`);\n\n    axios\n      .get(\n        `https://api.giphy.com/v1/gifs/search?api_key=${myKey}&q=${query}&limit=${\n          pagination.limit\n        }&offset=${pagination.offset}`\n      )\n      .then(response => {\n        setSpinner(false);\n\n        // handle success\n        let res = response.data;\n\n        if (res.data.length > 0) {\n          //if there are gifs then...\n          setError({\n            show: false\n          });\n          paginationHandler(res, query);\n          setSearchStr(query);\n          let copyTagsArr = gifsTags;\n          //search if there is a similar item on the array, if not add it.\n          if (copyTagsArr.filter(item => item === query).length === 0)\n            setGifsTags([...gifsTags, query]);\n        } else {\n          //if there are no gifs show error.\n          setError({\n            show: true,\n            notFound: true,\n            message: `Oops! No results were found for ${query}. Try searching for another thing.`\n          });\n        }\n      })\n      .catch(err => {\n        setSpinner(false);\n\n        setError({\n          show: true,\n          message: `Oops! We couldn't connect with the servers`\n        });\n      });\n  };\n\n  const removeTagHandler = query => {\n    setGifsTags([...gifsTags].filter(item => item !== query));\n  };\n\n  useEffect(() => {\n    //get the trending gifs\n    trendingGifHandler();\n    window.addEventListener(\"scroll\", listenToScroll);\n  }, []);\n\n  const listenToScroll = () => {\n    const winScroll =\n      document.body.scrollTop || document.documentElement.scrollTop;\n\n    const height =\n      document.documentElement.scrollHeight -\n      document.documentElement.clientHeight;\n\n    const scrolled = winScroll / height;\n    console.log(scrolled);\n\n    setWindowPosition(scrolled);\n  };\n\n  let display = <GifsList gifsList={gifs} />;\n  if (error.show) {\n    display = <div className=\"AppError\">{error.message}</div>;\n  }\n  if (error.notFound) {\n    display = <NotFound />;\n  }\n  let windowPercent = (windowPosition * 100).toFixed(2);\n  if (windowPercent >= 100) {\n    if (searchStr) {\n      searchHandler(searchStr);\n    } else {\n      trendingGifHandler();\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"AppBackground\" />\n      <Logo />\n      <Wrapper>\n        <Search val={searchStr} search={searchHandler} />\n        <Tags\n          goto={searchHandler}\n          remove={removeTagHandler}\n          gifsTags={gifsTags}\n        />\n      </Wrapper>\n      <Wrapper>{spinner ? <Spinner /> : display}</Wrapper>\n      <p>Powered By GIPHY</p>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./containers/App/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}